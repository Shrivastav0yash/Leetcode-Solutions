Precomputation Code:-

//Complexity = O(n);
// Space = O(2n);

class Solution {
public:
    int trap(vector<int>& nums) {
        int n = nums.size();
        int count  = 0;
        vector<int> prefix(n,0);
        vector<int> suffix(n,0);
        prefix[0] = nums[0];
        for(int i=1;i<n;i++)
        {
            
            prefix[i] = max(nums[i], prefix[i-1]);
        }
        suffix[n-1] = nums[n-1];
        for(int i=n-2;i>=0;i--)
        {
            suffix[i] = max(nums[i],suffix[i+1]);
        }
        
        for(int i=0;i<n;i++)
        {
            count =  count + (min(prefix[i],suffix[i]) - nums[i]);
        }
        
        return count;
    }
};

Two Pointers Approach :-

//Complexity - O(n)
//Space - O(1)

int n = nums.size();
        int ans = 0;
        int left = 0;
        int right = 0;
        int l = 0;
        int h = n-1;
        
        while(l<=h)
        {
            if(nums[l]<=nums[h])
            {
                if(nums[l] >= left) left = nums[l];
                else    ans = ans + (left - nums[l]);
                l++;
            }
            else
            {
                if(nums[h] >= right) right = nums[h];
                else    ans = ans + (right - nums[h]);
                h--;
            }
        }
        
        return ans;

